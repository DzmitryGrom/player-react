{"version":3,"sources":["components/stateCover/index.js","components/statePlayItem/index.js","components/statePlayList/index.js","components/main/index.js","App.js","serviceWorker.js","redux/reducers/index.js","redux/reducers/tracks.js","redux/reducers/selectTrack.js","index.js"],"names":["StateCover","state","isPlay","isLoopTrack","getTracks","_this","props","__Store","tracks","getPlayId","selectTrack","getCurTime","document","querySelector","getProgressBar","getPlayer","getPositonTrack","i","length","id","pausePlayTrack","setTimeout","this","setState","play","bind","Object","assertThisInitialized","pause","rewindTrack","e","currentTime","pageX","timeline","offsetLeft","offsetWidth","duration","endedTrack","nextPlayTrack","timeChange","time","Date","innerHTML","concat","getUTCHours","toUTCString","slice","style","width","toFixed","curIndex","onSelectTrack","loopTrack","prevPlayTrack","_this2","isOpenList","selectObj","filter","x","react_default","a","createElement","className","backgroundImage","user","avatar_url","onEnded","onTimeUpdate","display","src","controls","onClick","ref","username","title","Component","connect","dispatch","trackId","type","payload","StatePlayItem","_ref","isSelect","trackItem","setTime","StatePlayList","handleClick","selectTrackId","_this$props","onButtonClick","statePlayItem","map","tracksItem","index","key","statePlayItem_StatePlayItem","Main","fetch","then","response","json","onAddTracks","components_stateCover","components_statePlayList","testStore","App","components_main","Boolean","window","location","hostname","match","combineReducers","arguments","undefined","action","toConsumableArray","store","createStore","reducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.10e9766c.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport './index.css'\r\n\r\nclass StateCover extends Component {\r\n    state = {\r\n        isPlay: true,\r\n        isLoopTrack: false\r\n    };\r\n       \r\n    getTracks = () => this.props.__Store.tracks[0];\r\n\r\n    getPlayId = () => this.props.__Store.selectTrack[0];\r\n\r\n    getCurTime = () => document.querySelector('#curTime');\r\n\r\n    getProgressBar = () => document.querySelector('#progressBar');\r\n\r\n    getPlayer = () => document.querySelector('audio');\r\n\r\n    getPositonTrack = () => {\r\n        for ( let i = 0; i < this.getTracks().length; i++) {\r\n            if ( this.getTracks()[i].id === this.getPlayId()) {\r\n                return i\r\n            }\r\n        }\r\n    }\r\n  \r\n    pausePlayTrack = (i) => {\r\n        if(typeof i === 'number'){\r\n            setTimeout(function() {\r\n                this.setState({ isPlay: true });\r\n                this.getPlayer().play();\r\n            }.bind(this),0)\r\n        } else {           \r\n            this.setState({ isPlay: !this.state.isPlay });\r\n            this.state.isPlay ? this.getPlayer().pause() : this.getPlayer().play(); \r\n        }\r\n    };\r\n\r\n    rewindTrack = (e) => {\r\n        this.getPlayer().currentTime = ((e.pageX - this.timeline.offsetLeft) / this.timeline.offsetWidth) * this.getPlayer().duration;\r\n    }\r\n\r\n    endedTrack = () => {\r\n        if (this.getPositonTrack() < this.getTracks().length - 1 && !this.state.isLoopTrack) {\r\n            this.nextPlayTrack();\r\n        }\r\n        if (this.state.isLoopTrack) {\r\n            this.getPlayer().play();\r\n        } else {\r\n            this.setState({ isPlay: false });\r\n            this.getPlayer().pause();\r\n            this.getPlayer().currentTime = 0;\r\n        }\r\n\r\n    }\r\n\r\n    timeChange = () => {\r\n        let time = new Date(this.getPlayer().currentTime * 1000);\r\n        this.getCurTime().innerHTML = `${(time.getUTCHours() ? time.toUTCString().slice(17, 25) : time.toUTCString().slice(20, 25))}`;  \r\n        this.getProgressBar().style.width = (this.getPlayer().currentTime * 100 / this.getPlayer().duration).toFixed(1) + \"%\";\r\n    }\r\n\r\n    nextPlayTrack = () => {\r\n        let curIndex = this.getPositonTrack();\r\n        ++curIndex;\r\n        this.props.onSelectTrack( this.getTracks()[curIndex].id );\r\n        this.pausePlayTrack(curIndex);\r\n    }\r\n\r\n    loopTrack = () => {\r\n        this.setState({ isLoopTrack: !this.state.isLoopTrack });\r\n    }\r\n\r\n    prevPlayTrack = () => {\r\n        let curIndex = this.getPositonTrack();\r\n        --curIndex;\r\n        this.props.onSelectTrack( this.getTracks()[curIndex].id );\r\n        this.pausePlayTrack(curIndex);\r\n    }\r\n\r\n    render(){\r\n        const { isOpenList } = this.props;\r\n        let selectObj = {};\r\n\r\n        if(this.getTracks()){\r\n            selectObj = this.getTracks().filter(x => x.id === this.getPlayId());\r\n        }\r\n\r\n        return(\r\n            <div>\r\n                <div className=\"background\"  style={{backgroundImage: selectObj[0] ? `url(${selectObj[0].user.avatar_url})` : null}}></div>\r\n                <div className={isOpenList ? 'state state-cover state-cover-up' : 'state state-cover'}>\r\n                <div className=\"panel panel_top\">\r\n                    <span className=\"panel-side-title\"><i className=\"i i_arrow\"/><span className=\"panel-side-tittle-text\">Now Playing</span></span>\r\n                </div>\r\n                <div className=\"track\">\r\n                <div className=\"track-cover\"/>\r\n                    {selectObj[0] ? (\r\n                        <div>\r\n                            <div className=\"track-cover-author\" style={{ backgroundImage: `url(${selectObj[0].user.avatar_url})` }}/>\r\n                            <audio  onEnded={ this.endedTrack }  onTimeUpdate={this.timeChange} style={{display: 'none'}} src={`https://api.soundcloud.com/tracks/${this.getPlayId()}/stream?client_id=7172aa9d8184ed052cf6148b4d6b8ae6`} controls/>\r\n                            <div id=\"defaultBar\" className=\"track-bar\" onClick={this.rewindTrack}  ref={(timeline) => { this.timeline = timeline }}>\r\n                                <span  id=\"progressBar\" className=\"track-bar-line\">\r\n                                    <span id=\"curTime\" className=\"track-bar-value\">00:00</span>\r\n                                </span>\r\n                            </div>\r\n                            <h2 className=\"track-albom\">{selectObj[0].user.username}</h2>\r\n                            <h3 className=\"track-caption\">\r\n                                <span className=\"track-caption-text\">{selectObj[0].title}</span>\r\n                            </h3>\r\n                            <div className=\"controller\">\r\n                                {/*<a className=\"controller-btn\" href=\"#\">*/}\r\n                                {/*<i className=\"i i_shufle\"/>*/}\r\n                                {/*</a>*/}\r\n                                <div className=\"controller-btn\">\r\n                                <i className={this.getPositonTrack() >= 1 ? \"i icon-backward\" : \"i icon-backward disabled\"} onClick={this.getPositonTrack() >= 1 ? this.prevPlayTrack : null} />    \r\n                                </div>\r\n                              \r\n                                <div className=\"controller-btn\" onClick={this.pausePlayTrack}>\r\n                                    <i className={this.state.isPlay ? \"i icon-pause\" : \"i icon-play\"} />\r\n                                </div> \r\n                                \r\n                                <div className=\"controller-btn\">\r\n                                    <i className={(this.getPositonTrack() + 1) < this.getTracks().length ? \"i icon-forward\" : \"i icon-forward disabled\"} onClick={(this.getPositonTrack() + 1) < this.getTracks().length ? this.nextPlayTrack : null} />\r\n                                </div>\r\n                                <div className=\"controller-btn\">\r\n                                    <i className={this.state.isLoopTrack ? \"i icon-loop icon-loop-active\" : \"i icon-loop\"} onClick={this.loopTrack}/>\r\n                                </div>\r\n                            </div>\r\n                       </div>\r\n                    ) : null }\r\n                </div>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n   \r\n};\r\n\r\nexport default connect(\r\n    state => ({\r\n        __Store: state\r\n    }),\r\n   \r\n    dispatch => ({\r\n        onSelectTrack: (trackId) => {\r\n            dispatch({ type: 'PLAY_TRACK_ID', payload: trackId })\r\n        }\r\n    })\r\n)(StateCover);  ","import React from 'react'\r\nimport './index.css'\r\n\r\nexport const StatePlayItem = ({ isSelect, trackItem }) => {\r\n    const time = new Date();\r\n    time.setTime(trackItem.duration);\r\n    return (\r\n        <div className={isSelect ? 'playlist-item playlist-item-select' : 'playlist-item'}>\r\n            <div className=\"pl-side_left\">\r\n                <span className=\"pl-text_top\">{trackItem.user.username}</span>\r\n                <span className=\"pl-text_botton\">{trackItem.title}</span>\r\n            </div>\r\n            <div className=\"pl-side_right\">\r\n                <div className=\"pl-time-side_right\">\r\n                    <span className=\"pl-item-time\">{time.getUTCHours() ? time.toUTCString().slice(17, 25) : time.toUTCString().slice(20, 25)}</span>\r\n                </div>\r\n                <div className=\"i i_scale\">\r\n                    <span className=\"i_scale-bar\"></span>\r\n                    <span className=\"i_scale-bar\"></span>\r\n                    <span className=\"i_scale-bar\"></span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { Component } from 'react'\r\nimport { StatePlayItem } from '../statePlayItem'\r\nimport { connect } from 'react-redux';\r\nimport './index.css'\r\n\r\nclass StatePlayList extends Component {\r\n    handleClick = selectTrackId => {\r\n        this.props.onSelectTrack(selectTrackId);\r\n        setTimeout(function() {\r\n            document.querySelector('audio').play();\r\n        },0)\r\n    };\r\n\r\n    getPlayId = () => this.props.__Store.selectTrack[0];\r\n\r\n    render(){\r\n        const { onButtonClick, isOpenList } = this.props;\r\n       \r\n        if (this.props.__Store.tracks.length > 0) {\r\n            const statePlayItem = this.props.__Store.tracks[0].map((tracksItem, index) =>\r\n                <li key={tracksItem.id} onClick={this.handleClick.bind(this, tracksItem.id)}>\r\n                    <StatePlayItem\r\n                        isSelect={this.getPlayId() === tracksItem.id}\r\n                        trackItem={tracksItem}\r\n                    />\r\n                </li>\r\n            );\r\n            return (\r\n                <div className={isOpenList ? 'state state-playlist state-playlist-active' : 'state state-playlist'}>\r\n                    <div className=\"panel panel_top panel_bg\" onClick={onButtonClick}>\r\n                        <span className=\"top-panel-text\">Playlist</span>\r\n                    </div>\r\n                    <ul className=\"playlist\">\r\n                        {statePlayItem}\r\n                    </ul>\r\n                </div>\r\n            )\r\n        }\r\n        return null\r\n    }\r\n   \r\n}\r\n\r\nexport default connect(\r\n    state => ({\r\n        __Store: state\r\n    }),\r\n    dispatch => ({\r\n        onSelectTrack: (trackId) => {\r\n            dispatch({ type: 'PLAY_TRACK_ID', payload: trackId })\r\n        }\r\n    })\r\n)(StatePlayList);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './index.css'\r\n\r\nimport StateCover from '../stateCover'\r\nimport StatePlayList from '../statePlayList'\r\n\r\nclass Main extends Component {\r\n    state = {\r\n        isOpenList: false,\r\n    };\r\n\r\n    componentDidMount() {\r\n        fetch(`https://api.soundcloud.com/tracks?client_id=7172aa9d8184ed052cf6148b4d6b8ae6&genres=pop&offset=663`)\r\n            .then(response => response.json())\r\n            .then(tracks => {\r\n                this.props.onAddTracks(tracks)\r\n            })\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <StateCover isOpenList={this.state.isOpenList}/>\r\n                <StatePlayList\r\n                    isOpenList={this.state.isOpenList}\r\n                    onButtonClick={this.handleClick.bind(this)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handleClick = isOpenList => this.setState({ isOpenList: !this.state.isOpenList })\r\n}\r\n\r\nexport default connect(\r\n    state => ({\r\n        testStore: state\r\n    }),\r\n    dispatch => ({\r\n        onAddTracks: (tracks) => {\r\n            dispatch({ type: 'TRACKS', payload: tracks })\r\n        }\r\n    })\r\n)(Main);\r\n","import React, { Component } from 'react';\r\n\r\nimport Main from './components/main'\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return <Main/>\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\r\n\r\nimport  tracks from './tracks';\r\nimport  selectTrack from './selectTrack';\r\n\r\nexport default combineReducers({\r\n    tracks,\r\n    selectTrack\r\n})","export default function tracks(state = [], action) {\r\n    if(action.type === 'TRACKS') {\r\n        return [...state, action.payload]\r\n\r\n    }\r\n    return state;\r\n}","export default function selectTrack(state = [], action) {\r\n    if(action.type === 'PLAY_TRACK_ID') {\r\n        return [action.payload]\r\n\r\n    }\r\n    return state;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducers from './redux/reducers';\n\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nconst store = createStore(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}